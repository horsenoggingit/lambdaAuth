environment:
    AWSCLIUserProfile: adminuser
cognitoIdentityPoolInfo:
    roleDefinitions:
        apiAccessRole:
            policyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Federated: cognito-identity.amazonaws.com
                        Action: 'sts:AssumeRoleWithWebIdentity'
                        Condition:
                            StringEquals:
                                'cognito-identity.amazonaws.com:aud': 'us-east-1:a312d3e3-c45b-49eb-8d72-5b7acd73edc0'
                            'ForAnyValue:StringLike':
                                'cognito-identity.amazonaws.com:amr': authenticated
            policies:
                -
                    arnPolicy: 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'
                    name: AmazonAPIGatewayInvokeFullAccess
    identityPools:
        Pool:
            lambdaAliases:
                resource: IDENTITY_POOL
            authProviders:
                custom:
                    developerProvider: testProvider
            allowUnauthedIdentities: false
            roles:
                authenticated: apiAccessRole
            rolePolicyDocumentStatementConditions:
                apiAccessRole:
                    -
                        Action: 'sts:AssumeRoleWithWebIdentity'
                        Condition:
                            StringEquals:
                                'cognito-identity.amazonaws.com:aud': $identityPoolId
                            'ForAnyValue:StringLike':
                                'cognito-identity.amazonaws.com:amr': authenticated
lambdaInfo:
    roleDefinitions:
        userConsumer:
            policyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: lambda.amazonaws.com
                        Action: 'sts:AssumeRole'
            policies:
                -
                    arnPolicy: 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
                    name: AmazonDynamoDBFullAccess
                -
                    arnPolicy: 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'
                    name: AmazonCognitoReadOnly
                -
                    arnPolicy: 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
                    name: AWSLambdaBasicExecutionRole
        userCreator:
            policyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: lambda.amazonaws.com
                        Action: 'sts:AssumeRole'
            policies:
                -
                    arnPolicy: 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
                    name: AmazonDynamoDBFullAccess
                -
                    arnPolicy: 'arn:aws:iam::aws:policy/AmazonCognitoPowerUser'
                    name: AmazonCognitoPowerUser
                -
                    arnPolicy: 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
                    name: AWSLambdaBasicExecutionRole
apiInfo:
    roleDefinitions:
        lambdaExecuteRole:
            policyDocument:
                Version: '2012-10-17'
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: apigateway.amazonaws.com
                        Action: 'sts:AssumeRole'
            policies:
                -
                    arnPolicy: 'arn:aws:iam::940223146162:policy/LambdaInvocation'
                    name: LambdaInvocation
    defaultDeployStage: dev
    region: us-east-1
    title: SwaggerAuth
    AWSSwaggerHeader:
        swagger: '2.0'
        info:
            version: 1.0.0
            description: 'Developer Provider Auth'
            termsOfService: 'http://noneyet.com/'
            contact:
                name: HN
                email: horsenoggin@gmail.com
                url: 'http://horsenoggin.some'
            license:
                name: MIT
                url: 'http://opensource.org/licenses/MIT'
        schemes:
            - https
        consumes:
            - application/json
        produces:
            - application/json
    sharedDefinitions:
        user:
            type: object
            required:
                - email
            properties:
                email:
                    type: string
                name:
                    type: string
                dob:
                    type: number
                last_login_timestamp:
                    type: number
                signup_timestamp:
                    type: number
                logins:
                    type: object
                    additionalProperties:
                        type: string
                provider_name:
                    type: string
        signupRequest:
            type: object
            required:
                - email
                - password
                - device_id
            properties:
                email:
                    type: string
                password:
                    type: string
                device_id:
                    type: string
                name:
                    type: string
                dob:
                    type: number
        loginRequest:
            type: object
            required:
                - email
                - password
                - device_id
            properties:
                email:
                    type: string
                password:
                    type: string
                device_id:
                    type: string
        tokenRequest:
            type: object
            required:
                - id
                - provider_name
                - device_id
            properties:
                id:
                    type: string
                provider_name:
                    type: string
                device_id:
                    type: string
        credentials:
            type: object
            required:
                - IdentityId
                - Token
            properties:
                IdentityId:
                    type: string
                Token:
                    type: string
        Error:
            type: object
            required:
                - message
                - type
                - requestId
            properties:
                message:
                    type: string
                type:
                    type: string
                requestId:
                    type: string
        introRandomResponse:
            type: array
            items:
                $ref: '#/definitions/user'
    sharedSecurityDefinitions:
        sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
dynamodbInfo:
    Users:
        lambdaAliases:
            resource: USERS
            attributes:
                ID: id
                EMAIL: email
                NAME: name
                DOB: dob
                LAST_LOGIN_TIMESTAMP: lastLoginTimestamp
                PASSWORD: password
                SIGNUP_TIMESTAMP: signupTimestamp
        attributeDefinitions:
            -
                AttributeName: id
                AttributeType: S
        keySchema:
            -
                AttributeName: id
                KeyType: HASH
        provisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
    UserEmail:
        lambdaAliases:
            resource: EMAILS
            attributes:
                EMAIL: email
                ID: id
        attributeDefinitions:
            -
                AttributeName: email
                AttributeType: S
        keySchema:
            -
                AttributeName: email
                KeyType: HASH
        provisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
    DeviceUsers:
        lambdaAliases:
            resource: DEVICES
            attributes:
                DEVICE_ID: deviceId
                IDS: ids
        attributeDefinitions:
            -
                AttributeName: deviceId
                AttributeType: S
        keySchema:
            -
                AttributeName: deviceId
                KeyType: HASH
        provisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
s3Info:
    buckets:
        photobucket:
            region: us-east-1
            lambdaAliases:
                resource: PHOTOBUCKET
vpcInfo:
    vpcs:
        lambdaAuth:
            instance-tenancy: default
            cidr-block: 10.0.0.0/24
securityGroupInfo:
    securityGroups:
        lambdaAuth:
            vpc: lambdaAuth
subnetInfo:
    subnets:
        lambdaAuth:
            cidr-block: 10.0.0.0/24
            vpc: lambdaAuth
